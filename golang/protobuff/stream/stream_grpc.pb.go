// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: usermgmt/stream.proto

package websocket_simulator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebSocketSimulatorClient is the client API for WebSocketSimulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSocketSimulatorClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (WebSocketSimulator_SendMessageClient, error)
}

type webSocketSimulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketSimulatorClient(cc grpc.ClientConnInterface) WebSocketSimulatorClient {
	return &webSocketSimulatorClient{cc}
}

func (c *webSocketSimulatorClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (WebSocketSimulator_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebSocketSimulator_ServiceDesc.Streams[0], "/websocket_simulator.WebSocketSimulator/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &webSocketSimulatorSendMessageClient{stream}
	return x, nil
}

type WebSocketSimulator_SendMessageClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type webSocketSimulatorSendMessageClient struct {
	grpc.ClientStream
}

func (x *webSocketSimulatorSendMessageClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webSocketSimulatorSendMessageClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebSocketSimulatorServer is the server API for WebSocketSimulator service.
// All implementations must embed UnimplementedWebSocketSimulatorServer
// for forward compatibility
type WebSocketSimulatorServer interface {
	SendMessage(WebSocketSimulator_SendMessageServer) error
	mustEmbedUnimplementedWebSocketSimulatorServer()
}

// UnimplementedWebSocketSimulatorServer must be embedded to have forward compatible implementations.
type UnimplementedWebSocketSimulatorServer struct {
}

func (UnimplementedWebSocketSimulatorServer) SendMessage(WebSocketSimulator_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedWebSocketSimulatorServer) mustEmbedUnimplementedWebSocketSimulatorServer() {}

// UnsafeWebSocketSimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketSimulatorServer will
// result in compilation errors.
type UnsafeWebSocketSimulatorServer interface {
	mustEmbedUnimplementedWebSocketSimulatorServer()
}

func RegisterWebSocketSimulatorServer(s grpc.ServiceRegistrar, srv WebSocketSimulatorServer) {
	s.RegisterService(&WebSocketSimulator_ServiceDesc, srv)
}

func _WebSocketSimulator_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebSocketSimulatorServer).SendMessage(&webSocketSimulatorSendMessageServer{stream})
}

type WebSocketSimulator_SendMessageServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type webSocketSimulatorSendMessageServer struct {
	grpc.ServerStream
}

func (x *webSocketSimulatorSendMessageServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webSocketSimulatorSendMessageServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebSocketSimulator_ServiceDesc is the grpc.ServiceDesc for WebSocketSimulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocketSimulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocket_simulator.WebSocketSimulator",
	HandlerType: (*WebSocketSimulatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _WebSocketSimulator_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "usermgmt/stream.proto",
}
