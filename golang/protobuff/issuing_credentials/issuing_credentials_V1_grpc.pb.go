// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: issuing_credentials/issuing_credentials_V1.proto

package verifiable_credentials

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VerifiableCredentialServiceClient is the client API for VerifiableCredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifiableCredentialServiceClient interface {
	IssueCredential(ctx context.Context, opts ...grpc.CallOption) (VerifiableCredentialService_IssueCredentialClient, error)
}

type verifiableCredentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifiableCredentialServiceClient(cc grpc.ClientConnInterface) VerifiableCredentialServiceClient {
	return &verifiableCredentialServiceClient{cc}
}

func (c *verifiableCredentialServiceClient) IssueCredential(ctx context.Context, opts ...grpc.CallOption) (VerifiableCredentialService_IssueCredentialClient, error) {
	stream, err := c.cc.NewStream(ctx, &VerifiableCredentialService_ServiceDesc.Streams[0], "/verifiable_credentials.VerifiableCredentialService/IssueCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &verifiableCredentialServiceIssueCredentialClient{stream}
	return x, nil
}

type VerifiableCredentialService_IssueCredentialClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type verifiableCredentialServiceIssueCredentialClient struct {
	grpc.ClientStream
}

func (x *verifiableCredentialServiceIssueCredentialClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *verifiableCredentialServiceIssueCredentialClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VerifiableCredentialServiceServer is the server API for VerifiableCredentialService service.
// All implementations must embed UnimplementedVerifiableCredentialServiceServer
// for forward compatibility
type VerifiableCredentialServiceServer interface {
	IssueCredential(VerifiableCredentialService_IssueCredentialServer) error
	mustEmbedUnimplementedVerifiableCredentialServiceServer()
}

// UnimplementedVerifiableCredentialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVerifiableCredentialServiceServer struct {
}

func (UnimplementedVerifiableCredentialServiceServer) IssueCredential(VerifiableCredentialService_IssueCredentialServer) error {
	return status.Errorf(codes.Unimplemented, "method IssueCredential not implemented")
}
func (UnimplementedVerifiableCredentialServiceServer) mustEmbedUnimplementedVerifiableCredentialServiceServer() {
}

// UnsafeVerifiableCredentialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifiableCredentialServiceServer will
// result in compilation errors.
type UnsafeVerifiableCredentialServiceServer interface {
	mustEmbedUnimplementedVerifiableCredentialServiceServer()
}

func RegisterVerifiableCredentialServiceServer(s grpc.ServiceRegistrar, srv VerifiableCredentialServiceServer) {
	s.RegisterService(&VerifiableCredentialService_ServiceDesc, srv)
}

func _VerifiableCredentialService_IssueCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VerifiableCredentialServiceServer).IssueCredential(&verifiableCredentialServiceIssueCredentialServer{stream})
}

type VerifiableCredentialService_IssueCredentialServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type verifiableCredentialServiceIssueCredentialServer struct {
	grpc.ServerStream
}

func (x *verifiableCredentialServiceIssueCredentialServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *verifiableCredentialServiceIssueCredentialServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VerifiableCredentialService_ServiceDesc is the grpc.ServiceDesc for VerifiableCredentialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifiableCredentialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "verifiable_credentials.VerifiableCredentialService",
	HandlerType: (*VerifiableCredentialServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IssueCredential",
			Handler:       _VerifiableCredentialService_IssueCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "issuing_credentials/issuing_credentials_V1.proto",
}
